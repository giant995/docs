---
api_name: rolling()
excerpt: Roll up multiple statistical aggregates to calculate rolling window aggregates
topics: [hyperfunctions]
keywords:
  [rollup, statistics, statistical aggregates, hyperfunctions, toolkit]
api:
  license: community
  type: function
  toolkit: true
hyperfunction:
  family: statistical aggregates
  type: rollup
  aggregates:
    - stats_agg()
summary: |-
  Combine multiple statistical aggregates into a single statistical aggregate.
  For example, you can use `rolling` to combine statistical aggregates from
  15-minute buckets into daily buckets.
  This function work with both one- and two-dimensional statistical aggregates.
details:
  - type: note
    content: |-
      Compared to [`rollup`](#rollup), `rolling` is more efficient for computing
      [tumbling window
      aggregates](https://www.postgresql.org/docs/current/tutorial-window.html).
      In certain unusual scenarios, it might introduce more floating point
      errors.

      `rollup` also works for windowed aggregates. It is less efficient but
      doesn't have the risk of extra errors.
signatures:
  - language: sql
    code: |-
      rolling(
          ss StatsSummary1D
      ) RETURNS StatsSummary1D
  - language: sql
    code: |-
      rolling(
          ss StatsSummary2D
      ) RETURNS StatsSummary2D
parameters:
  required:
    - name: summary
      type: StatsSummary1D | StatsSummary2D
      description: >-
        The statistical aggregate produced by a `stats_agg` call
  returns:
    - column: rolling
      type: StatsSummary1D | StatsSummary2D
      description: >-
        A new statistical aggregate produced by combining the input statistical
        aggregates
examples:
  - description: >-
      Combine hourly continuous aggregates to create a tumbling window daily
      aggregate. Calculate the [average](#average) and [standard
      deviation](#stddev) using the appropriate accessors.
    input:
      - language: sql
        code: |-
          CREATE MATERIALIZED VIEW foo_hourly
          WITH (timescaledb.continuous)
          AS SELECT
            time_bucket('1h'::interval, ts) AS bucket,
            stats_agg(value) as stats
          FROM foo
          GROUP BY 1;
          SELECT
            bucket,
            average(rolling(stats) OVER (ORDER BY bucket RANGE '1 day' PRECEDING)),
            stddev(rolling(stats) OVER (ORDER BY bucket RANGE '1 day' PRECEDING)),
          FROM foo_hourly;
---

